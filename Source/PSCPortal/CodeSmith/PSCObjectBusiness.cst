<%-- 
Name: PSCObjectBusiness
Author: Nguyen Quang Hien
Description: File san sinh code cho lop Object Business
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="" Inherits="" Debug="False" Description="Template description here." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Optional="False" Category="Database" Description="Bang se san sinh class" %>
<%@ Property Name="Namespace" Type="System.String" Optional="False" Category="Class" Description="Day la ten namespace" %>
<%@ Property Name="ClassName" Type="System.String" Optional="False" Category="Class" Description="Day la ten lop" %>
<%@ Property Name="ConnectionStringName" Type="System.String" Optional="False" Category="Class" Description="Day ten chuoi ket noi trong web.conf" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Map Name="CSharpAlias" Src="Sql-CSharp" Description="System to DbType Type Map" %>
<%@ Map Name="CSharpAliasDbType" Src="SqlNativeType-DbType" Description="System to CSharp Type Map" %>

<%-- Business Object Args --%>
#region <%=ClassName%>Args
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Common;
using PSCPortal.Framework;
namespace <%=Namespace%>
{
	public delegate void <%=ClassName%>Delegate (object sender, <%=ClassName%>Args args);
	[Serializable]
	public class <%=ClassName%>Args:EventArgs
	{
		private <%=ClassName%> _<%=GetAttributeName(ClassName)%>;
		public <%=ClassName%> <%=ClassName%>
		{
			get
			{
				return _<%=GetAttributeName(ClassName)%>;
			}
		}
		private bool _isEdit;
		public bool IsEdit
		{
			get
			{
				return _isEdit;
			}
		}
		public <%=ClassName%>Args (<%=ClassName%> <%=GetAttributeName(ClassName)%>, bool isEdit)
		{
			_<%=GetAttributeName(ClassName)%> = <%=GetAttributeName(ClassName)%>;
			_isEdit = isEdit;
		}
	}
}
#endregion
<%-- End Business Object Args --%>
<%-- Business Object --%>
#region <%=ClassName%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Common;
using PSCPortal.Framework;
namespace <%=Namespace%>
{
	[Serializable]
	public class <%=ClassName%>:PSCPortal.Framework.BusinessObject<<%=ClassName%>>
	{	
		#region Properties
	<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns){%>
	<% if(!column.IsForeignKeyMember) { %>		
		private <%=CSharpAlias[column.NativeType]%> _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%> <%if(CSharpAlias[column.NativeType]=="string"){%>= string.Empty<%}%>;						
		public <%=CSharpAlias[column.NativeType]%> <%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>
		{
			get
			{
				return _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
			}
			set
			{								
				<%if(CSharpAlias[column.NativeType]=="string"){%>
				if(value==null)
					value=string.Empty;
				<%}%>
				_<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%> = value;				
			}
		}
		<% } %>
		
	<%}%>		
		#endregion
		
		#region Constructions
		public <%=ClassName%>()
			:base()
		{
		}
		
		public <%=ClassName%>(DbDataReader reader)
			:base(reader)
		{		
		}				
		#endregion  
		#region Abstract Methods
		protected override void MappingData(System.Data.Common.DbDataReader reader)
        {
            <%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
			<%{%>
				<% if(!column.IsForeignKeyMember) %>
				<% { %>
			_<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%> = (<%=CSharpAlias[column.NativeType]%>) reader["<%=column.Name%>"];
				<% } %>
			<%}%>      
        }    
		protected override System.Data.Common.DbCommand GetInsertCommand()
        {
            Database database = new Database(ConnectionStringName);
            DbCommand command = database.GetCommand();
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<%{%>
					<% if(!column.IsForeignKeyMember) %>
					<% { %>			
			#region <%=ClassName%><%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>
			DbParameter pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = database.GetParameter();
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.DbType = System.Data.DbType.<%=CSharpAliasDbType[column.NativeType]%>;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Direction = System.Data.ParameterDirection.InputOutput;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.ParameterName = "@<%=column.Name%>";
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Value = _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
			command.Parameters.Add(pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>);
			#endregion
					<% } %>
				<%}%>            

            #region Command Insert Data            
			<% string strParams = string.Empty; %>
			<% string strValues = string.Empty; %>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<% { %>
					<% if(!column.IsForeignKeyMember) %>
					<% { %>
					<% strParams += string.Format("[{0}],", column.Name); %>
					<% strValues += string.Format("@{0},", column.Name); %>
					<% } %>
				<% } %>
			<% strParams = strParams.Substring(0, strParams.Length - 1); %>
			<% strValues = strValues.Substring(0, strValues.Length - 1); %>
			command.CommandText = "INSERT INTO [<%=SourceTable.Name%>] (<%=strParams%>) VALUES (<%=strValues%>)";
			#endregion
			
            return command;
        }
		
		protected override System.Data.Common.DbCommand GetUpdateCommand()
        {
            Database database = new Database(ConnectionStringName);
            DbCommand command = database.GetCommand();
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<%{%>
					<% if(!column.IsForeignKeyMember) %>
					<% { %>			
			#region <%=ClassName%><%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>
			DbParameter pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = database.GetParameter();
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.DbType = System.Data.DbType.<%=CSharpAliasDbType[column.NativeType]%>;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Direction = System.Data.ParameterDirection.InputOutput;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.ParameterName = "@<%=column.Name%>";
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Value = _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
			command.Parameters.Add(pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>);
			#endregion
					<% } %>
				<%}%>            

            #region Command Update Data            
			<% string strUpdateValues = string.Empty; %>
			<% string strPrimaryKeyValues = string.Empty; %>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<% { %>
					<% if(!column.IsForeignKeyMember&&!column.IsPrimaryKeyMember) %>
					<% { %>
					<% strUpdateValues += string.Format("{0} = {1}, ", string.Format("[{0}]", column.Name), string.Format("@{0}", column.Name));%>
					<% } %>
				<% } %>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<% { %>
					<% if(column.IsPrimaryKeyMember) %>
					<% { %>
					<% strPrimaryKeyValues += string.Format("{0} = {1} AND ", string.Format("[{0}]", column.Name), string.Format("@{0}", column.Name));%>
					<% } %>
				<% } %>
			<% strUpdateValues = strUpdateValues.Substring(0, strUpdateValues.Length - 2); %>
			<% strPrimaryKeyValues = strPrimaryKeyValues.Substring(0, strPrimaryKeyValues.Length - 5); %>
			command.CommandText = "UPDATE [<%=SourceTable.Name%>] SET <%=strUpdateValues%> WHERE <%=strPrimaryKeyValues%>";
			#endregion
			
            return command;
        }
		
		protected override System.Data.Common.DbCommand GetDeleteCommand()
        {
            Database database = new Database(ConnectionStringName);
            DbCommand command = database.GetCommand();	         			
            #region Command Delete Data            	
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<%{%>
					<% if(!column.IsForeignKeyMember&&column.IsPrimaryKeyMember) %>
					<% { %>			
			#region <%=ClassName%><%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>
			DbParameter pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = database.GetParameter();
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.DbType = System.Data.DbType.<%=CSharpAliasDbType[column.NativeType]%>;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Direction = System.Data.ParameterDirection.InputOutput;
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.ParameterName = "@<%=column.Name%>";
			pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Value = _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
			command.Parameters.Add(pr<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>);
			#endregion
					<% } %>
				<%}%>          
				
			<% strPrimaryKeyValues = string.Empty; %>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<% { %>
					<% if(column.IsPrimaryKeyMember) %>
					<% { %>
					<% strPrimaryKeyValues += string.Format("{0} = {1} AND ", string.Format("[{0}]", column.Name), string.Format("@{0}", column.Name));%>
					<% } %>
				<% } %>			
			<% strPrimaryKeyValues = strPrimaryKeyValues.Substring(0, strPrimaryKeyValues.Length - 5); %>
			command.CommandText = "DELETE [<%=SourceTable.Name%>] WHERE <%=strPrimaryKeyValues%>";
			#endregion
			
            return command;
        }
				
		public override bool Equals(object obj)
		{
			if(obj.GetType() == typeof(<%=ClassName%>)
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<%{%>
					<% if(!column.IsForeignKeyMember&&column.IsPrimaryKeyMember) %>
					<% { %>			
				&&((<%=ClassName%>)obj)._<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>==_<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>
					<% } %>
				<%}%>
			   )
				return true;
			return false;
		}
		public override int GetHashCode()
        {
			int hashCode = 0;
            <%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<%{%>
					<% if(!column.IsForeignKeyMember&&column.IsPrimaryKeyMember) %>
					<% { %>			
				hashCode += _<%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>.GetHashCode();
					<% } %>
				<%}%>
			return hashCode;
        }
		protected static new string ConnectionStringName
        {
            get 
            {
                return "<%=ConnectionStringName%>";
            }
        }
		#endregion
	}
}
#endregion
<%-- End Business Object --%>

<%-- Business Object Collection --%>
#region <%=ClassName%>Collection
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PSCPortal.Framework;
using System.Data.Common;
namespace <%=Namespace%>
{
	[Serializable]
	public class <%=ClassName%>Collection:PSCPortal.Framework.BusinessObjectCollection<<%=ClassName%>Collection, <%=ClassName%>>
	{
		private <%=ClassName%>Collection()
			:base()
		{
		}		
		
		protected override DbCommand GetSelectAllCommand()
        {
            Database database = new Database(ConnectionStringName);
            DbCommand command = database.GetCommand();
			<% strParams = string.Empty; %>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
				<% { %>
					<% if(!column.IsForeignKeyMember) %>
					<% { %>
					<% strParams += string.Format("[{0}],", column.Name); %>
					<% } %>
				<% } %>
			<% strParams = strParams.Substring(0, strParams.Length - 1); %>
            command.CommandText = "SELECT <%=strParams%> FROM <%=SourceTable%>";
            return command;
        }
       
        public static <%=ClassName%>Collection Get<%=ClassName%>Collection()
        {
            Database database = new Database(ConnectionStringName);
            <%=ClassName%>Collection result = new <%=ClassName%>Collection();
            using (DbConnection connection = database.GetConnection())
            {
                DbCommand command = result.GetSelectAllCommand();
                command.Connection = connection;
                connection.Open();
                DbDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    <%=ClassName%> item = new <%=ClassName%>(reader);
                    result.Add(item);
                }
            }
            return result;
        }
		protected static new string ConnectionStringName
        {
            get
            {
                return "<%=ConnectionStringName%>";
            }
        }
	}
}	
#endregion
<%-- End Business Object Collection --%>

<%-- Business Object Page ASPX --%>
	<%--Header Template--%>
/*******Header Template*******/
<%%@ Register Assembly="Telerik.Web.UI" Namespace="Telerik.Web.UI" TagPrefix="telerik" %%>
/*******End Header Template*******/
	<%--End Header Template--%>
	<%--Javascript Template--%>
/*******Javascript Template*******/
	<script language="javascript" type="text/javascript">    
		var dialogMethod;
        function CallWebMethodSuccess(results, context, methodName) {
            switch (methodName) {
                case "Get<%=ClassName%>List":
                    {
                        Get<%=ClassName%>ListCallback(results, context, methodName);
                    }
                    break;
                case "Get<%=ClassName%>Count":
                    {
                        Get<%=ClassName%>CountCallback(results, context, methodName);
                    }
                    break;
                case "<%=ClassName%>New":
                    {
                        <%=ClassName%>NewCallback(results, context, methodName);
                    }
                    break;
                case "<%=ClassName%>Add":
                    {
                        <%=ClassName%>AddCallback(results, context, methodName);
                    }
                    break;
                case "<%=ClassName%>Edit":
                    {
                        <%=ClassName%>EditCallback(results, context, methodName);
                    }
                    break;
                case "<%=ClassName%>Update":
                    {
                        <%=ClassName%>UpdateCallback(results, context, methodName);
                    }
                    break;                
                case "<%=ClassName%>Delete":
                    {
                        <%=ClassName%>DeleteCallback(results, context, methodName);
                    }
                    break;                    
            }
        }
        function Get<%=ClassName%>Select() {
            var items = $find("<%%=gv<%=ClassName%>.ClientID%%>").get_masterTableView().get_selectedItems();            

            var objList = new Array();
            for (var i = 0; i < items.length; i++) {
                Array.add(objList, items[i].get_dataItem().Id);
            }
            return objList;
        }
        function CallWebMethodFailed(results, context, methodName) {
            alert(results._message);
        }

        function Get<%=ClassName%>List() {
            var tableView = $find("<%%=gv<%=ClassName%>.ClientID%%>").get_masterTableView();
            var sortExpressions = tableView.get_sortExpressions();
            PageMethods.Get<%=ClassName%>List(0, tableView.get_pageSize(), sortExpressions.toString(), CallWebMethodSuccess);
            PageMethods.Get<%=ClassName%>Count(CallWebMethodSuccess);
        }
        function Get<%=ClassName%>ListCallback(results, context, methodName) {
            var grid = $find("<%%=gv<%=ClassName%>.ClientID%%>");
            var tableView = grid.get_masterTableView();
            tableView.set_dataSource(Sys.Serialization.JavaScriptSerializer.deserialize(results));
            tableView.dataBind();
        }
        
        function Get<%=ClassName%>CountCallback(results, context, methodName) {
            var tableView = $find("<%%=gv<%=ClassName%>.ClientID%%>").get_masterTableView();
            tableView.set_virtualItemCount(results);
        }

        function <%=ClassName%>New() {
            PageMethods.<%=ClassName%>New(CallWebMethodSuccess, CallWebMethodFailed);
        }
        function <%=ClassName%>NewCallback(results, context, methodName) {
			dialogMethod = "<%=ClassName%>New";
            var oWnd = $find("<%%= rw<%=ClassName%>.ClientID %%>");
            oWnd.setSize(600, 280);
            oWnd.setUrl("<%=ClassName%>Detail.aspx");
            oWnd.show();             
        }
        function <%=ClassName%>AddCallback(result, context, methodName) {
            Get<%=ClassName%>List();
        }

        function <%=ClassName%>Edit() {
            var items = $find("<%%=gv<%=ClassName%>.ClientID%%>").get_masterTableView().get_selectedItems();
            if (items.length == 0) {
                radalert("You have not chosen the <%=ClassName%> yet!", 250, 100, "Error");
                return;
            }
            var obj = items[0].get_dataItem();
            PageMethods.<%=ClassName%>Edit(obj.Id, CallWebMethodSuccess, CallWebMethodFailed);
        }
        function <%=ClassName%>EditCallback(results, context, methodName) {
			dialogMethod = "<%=ClassName%>Edit";
            var oWnd = $find("<%%= rw<%=ClassName%>.ClientID %%>");
            oWnd.setSize(600, 280);
            oWnd.setUrl("<%=ClassName%>Detail.aspx");
            oWnd.show();                    
        }
        
        function <%=ClassName%>UpdateCallback(results, context, methodName) {
            Get<%=ClassName%>List();
        }
        
        function <%=ClassName%>Delete() {
			var objList = Get<%=ClassName%>Select();
            if (objList.length == 0) {
                radalert("You have not chosen the <%=ClassName%> yet!", 250, 100, "Error");
                return;
            }   
			radconfirm("Are you sure!", <%=ClassName%>DeleteConfirm, 250, 100, null, "Warning");         			
        }
		function <%=ClassName%>DeleteConfirm(args) {
			if (!args)
                return;	
			var objList = Get<%=ClassName%>Select();
			PageMethods.<%=ClassName%>Delete(objList, CallWebMethodSuccess, CallWebMethodFailed);
		}
        function <%=ClassName%>DeleteCallback(results, context, methodName) {
			radalert("Delete <%=ClassName%> Success", 250, 100, "Info");
            Get<%=ClassName%>List();            
			$find("<%%=gv<%=ClassName%>.ClientID%%>").get_masterTableView().clearSelectedItems();			
        }		
        function pageLoad() {        
            Get<%=ClassName%>List();
        }
        function gv<%=ClassName%>_Command(sender, args) {
            args.set_cancel(true);
            sender.get_masterTableView().clearSelectedItems();
            var currentPageIndex = sender.get_masterTableView().get_currentPageIndex();
            var pageSize = sender.get_masterTableView().get_pageSize();
            var sortExpressions = sender.get_masterTableView().get_sortExpressions();

            PageMethods.Get<%=ClassName%>List(currentPageIndex * pageSize, pageSize, sortExpressions.toString(), CallWebMethodSuccess);
            PageMethods.Get<%=ClassName%>Count(CallWebMethodSuccess);
        }          
		function RadWindow<%=ClassName%>Close(sender, args) {
            if (!args.get_argument())
                return;
            switch (dialogMethod) {
                case "<%=ClassName%>New":
                    {
                        PageMethods.<%=ClassName%>Add(CallWebMethodSuccess, CallWebMethodFailed);
                    }
                    break;
                case "<%=ClassName%>Edit":
                    {
                        PageMethods.<%=ClassName%>Update(CallWebMethodSuccess, CallWebMethodFailed);
                    }
                    break;				
            }
        }         
    </script>
/*******End Javascript Template*******/
	<%--End Javascript Template--%>
	<%--Control Template--%>
/*******Control Template*******/
	<telerik:RadWindow ID="rw<%=ClassName%>" runat="server" Modal="True" VisibleStatusbar="False" OnClientClose="RadWindow<%=ClassName%>Close">
    </telerik:RadWindow>
	<div>
        <a href="javascript:void(0)" onclick="<%=ClassName%>New();">[New]</a>
        <a href="javascript:void(0)" onclick="<%=ClassName%>Edit();">[Edit]</a>      
        <a href="javascript:void(0)" onclick="<%=ClassName%>Delete();">[Delete]</a>
    </div>
	<div>
        <telerik:radgrid id="gv<%=ClassName%>" runat="server"
            autogeneratecolumns="False" allowpaging="True"
            allowsorting="True" gridlines="None"
            AllowMultiRowSelection="True">    
            <MasterTableView ClientDataKeyNames="Id" AllowMultiColumnSorting="True">
                <Columns>
                     <telerik:GridClientSelectColumn>                        
                        <ItemStyle Width="20px" />
                    </telerik:GridClientSelectColumn> 
					<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
					<%{%>
					<% if(!column.IsForeignKeyMember) %>
						<% { %>		
					<telerik:GridBoundColumn HeaderText="<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>" DataField="<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>" <%=CSharpAlias[column.NativeType]=="DateTime"?"DataFormatString=\"{0:dd/MM/yyyy}\"":string.Empty%>>                        							
					</telerik:GridBoundColumn>
						<%}%>
					<%}%>		
                </Columns>
            </MasterTableView>  
            <ClientSettings EnableRowHoverStyle="true">                                          
                <Selecting AllowRowSelect="True" />
                <ClientEvents OnCommand="gv<%=ClassName%>_Command" />                
            </ClientSettings>                  
        </telerik:radgrid>
    </div>
/*******End Control Template*******/
	<%--End Control Template--%>
<%-- End Business Object Page ASPX --%>

<%-- Business Object Page ASPX.CS--%>
/*******Server Side ASPX.CS*******/
		protected static <%=ClassName%>Collection <%=ClassName%>List
        {
            get
            {
                if (DataStatic["<%=ClassName%>List"] == null)
                    DataStatic["<%=ClassName%>List"] = <%=ClassName%>Collection.Get<%=ClassName%>Collection();
                return DataStatic["<%=ClassName%>List"] as <%=ClassName%>Collection;
            }
        }
		[System.Web.Services.WebMethod]
        public static string Get<%=ClassName%>List(int startIndex, int maximumRows, string sortExpressions)
        {
            System.Web.Script.Serialization.JavaScriptSerializer js = new System.Web.Script.Serialization.JavaScriptSerializer();
            return js.Serialize(<%=ClassName%>List.GetSegment(startIndex, maximumRows, sortExpressions));
        }
        [System.Web.Services.WebMethod]
        public static int Get<%=ClassName%>Count()
        {
            return <%=ClassName%>List.Count;
        }
        [System.Web.Services.WebMethod]
        public static void <%=ClassName%>New()
        {          
            <%=ClassName%> item = new <%=ClassName%>();
            item.Id = Guid.NewGuid();
            PSCDialog.DataShare = new <%=ClassName%>Args(item, false);
        }        
        [System.Web.Services.WebMethod]
        public static void <%=ClassName%>Add()
        {
            <%=ClassName%>List.AddDB(((<%=ClassName%>Args)PSCDialog.DataShare).<%=ClassName%>);
        }
        [System.Web.Services.WebMethod]
        public static void <%=ClassName%>Edit(string id)
        {
            Guid id<%=ClassName%> = new Guid(id);
            PSCDialog.DataShare = new <%=ClassName%>Args(<%=ClassName%>List.Where(a => a.Id == id<%=ClassName%>).Single(), true);
        }
        [System.Web.Services.WebMethod]
        public static void <%=ClassName%>Update()
        {
            (PSCDialog.DataShare as <%=Namespace%>.<%=ClassName%>Args).<%=ClassName%>.Update();
        }
        [System.Web.Services.WebMethod]
        public static void <%=ClassName%>Delete(string[]arrId)
        {
            foreach (string id in arrId)
            {
                Guid id<%=ClassName%> = new Guid(id);
                <%=ClassName%>List.RemoveDB(<%=ClassName%>List.Where(a=>a.Id==id<%=ClassName%>).Single());
            }
        }        
/*******End Server Side ASPX.CS*******/		
<%-- End Business Object Page ASPX.CS--%>


<%-- Business Object Page Detail ASPX --%>
/*******Header Template*******/
<%%@ Register Assembly="Telerik.Web.UI" Namespace="Telerik.Web.UI" TagPrefix="telerik" %%>
/*******End Header Template*******/
/*******Javascript Template*******/
	<script language="javascript" type="text/javascript">
        function CallWebMethodSuccess(results, context, methodName) {
            switch (methodName) {
                case "Save":
                    {
                        SaveCallback(results, context, methodName);
                    }
                    break;                            
            }
        }
        function CallWebMethodFailed(results, context, methodName) {
            alert(results._message);
        }
        function Save() {
            
			<%{%>
			<%string args = string.Empty;%>
			<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
			<%{%>
				<% if(!column.IsForeignKeyMember&&!column.IsPrimaryKeyMember) %>
				<%{%>						
					<%if(CSharpAlias[column.NativeType]=="DateTime"){%>					
			var rdi<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = $find("<%%= rdi<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.ClientID %%>");
						<%args += "rdi"+GetPropertyName(column.Name.Replace(SourceTable.Name, ""))+".get_value()" + ", ";%>
					<%}%>
					<%else {%>
			var txt<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = document.getElementById("<%%= txt<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.ClientID %%>");
						<%args += "txt"+GetPropertyName(column.Name.Replace(SourceTable.Name, ""))+".value" + ", ";%>
					<%}%>
				<%}%>
			<%}%>
			<%if(args!=string.Empty)%>
				<%args = args.Substring(0, args.Length - 2);%>
            PageMethods.Save(<%=args%>, CallWebMethodSuccess, CallWebMethodFailed);
			<%}%>
        }       
		function SaveCallback(results, context, methodName) {
            var oWnd = GetRadWindow();
            oWnd.close(true); 
        }
        function Cancel() {
            var oWnd = GetRadWindow();
            oWnd.close(false); 
        }       
    </script>
/*******End Javascript Template*******/
/*******Control Template*******/
<table style="width:100%;" align="center" cellpadding="4px;">
<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
<%{%>
<% if(!column.IsForeignKeyMember) %>
	<% { %>		
	<tr>
        <td style="width:40%;" class="textinput" align="right">
            <%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>:
        </td>
        <td style="width:60%">
            <%if(CSharpAlias[column.NativeType]=="DateTime"){%>
				<telerik:RadDateInput ID="rdi<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>" runat="server" DisplayDateFormat="dd/MM/yyyy"
					Width="200px" MinDate="1900-01-01">
				</telerik:RadDateInput>
			<%}%>
			<%else{%>
				<asp:TextBox ID="txt<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>" runat="server" Width="200px"></asp:TextBox>
			<%}%>
        </td>
        <td>
            &nbsp;
        </td>
    </tr>  
	<%}%>
<%}%>	   	
	<tr align="center">
        <td colspan="2"><img src="/Systems/CMS/Image/line.jpg" width="438" height="1" alt="" /></td>
    </tr>
    <tr>
        <td colspan="2">
            <table style="width:15%" align="center">
                <tr>
                    <td style="width:50%;"><a href="javascript:void(0)" onclick="Save();" class="submit">Save</a></td>
                    <td style="width:50%"><a href="javascript:void(0)" onclick="Cancel();" class="submit">Cancel</a></td>
                </tr>
            </table>
        </td>
    </tr>
</table>
/*******End Control Template*******/
<%-- End Business Object Page Detail ASPX --%>

<%-- Business Object Page Detail ASPX.CS --%>
/*******Server Side Detail ASPX.CS*******/
	private static <%=ClassName%>Args Args
    {
        get
        {
            return DataShare as <%=ClassName%>Args;
        }
    }
	protected void Page_Load(object sender, EventArgs e)
    {            
		Response.Cache.SetCacheability(HttpCacheability.NoCache);
		
		LoadData();
    }
	protected void LoadData()
	{
		<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
		<%{%>
		<% if(!column.IsForeignKeyMember) %>
			<%{%>		
				<%if(CSharpAlias[column.NativeType]=="DateTime"){%>
					rdi<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.SelectedDate = Args.<%=ClassName%>.<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>;
				<%}%>
				<%else{%>
					txt<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %>.Text = Args.<%=ClassName%>.<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %><%=CSharpAlias[column.NativeType]=="string"?string.Empty:".ToString()"%>;
				<%}%>
			<%}%>
		<%}%>
	}
    [System.Web.Services.WebMethod]
	<%{%>
		<%string args = string.Empty;%>
		<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
		<%{%>
		<% if(!column.IsForeignKeyMember&&!column.IsPrimaryKeyMember) %>		
			<%{%>		
				<%if(CSharpAlias[column.NativeType]=="DateTime"){%>
					<%args += "DateTime "+GetAttributeName(column.Name.Replace(SourceTable.Name, "")) + ", ";%>
				<%}%>
				<%else{%>
					<%args += "string "+GetAttributeName(column.Name.Replace(SourceTable.Name, "")) + ", ";%>
				<%}%>
			<%}%>
		<%}%>
		<%if(args!=string.Empty)%>
			<%args = args.Substring(0, args.Length - 2);%>	
    public static void Save(<%=args%>)
	<%}%>
    {      
		<%foreach(SchemaExplorer.ColumnSchema column in SourceTable.Columns)%>
		<%{%>
		<% if(!column.IsForeignKeyMember&&!column.IsPrimaryKeyMember) %>
			<%{%>		
				<%if(CSharpAlias[column.NativeType]=="DateTime"){%>
					Args.<%=ClassName%>.<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = <%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
				<%}%>
				<%else{%>
					Args.<%=ClassName%>.<%=GetPropertyName(column.Name.Replace(SourceTable.Name, "")) %> = <%=GetAttributeName(column.Name.Replace(SourceTable.Name, ""))%>;
				<%}%>
			<%}%>
		<%}%>
    }
/*******End Server Side Detail ASPX.CS*******/
<%-- End Business Object Page Detail ASPX.CS --%>
<script runat="template">
	private string GetAttributeName(string attributeName)
	{
		string result;		
		result = attributeName.Substring(0,1).ToLower()+attributeName.Substring(1);		
		return result;
	}
	private string GetPropertyName(string propertyName)
	{
		string result;		
		result = propertyName.Substring(0,1).ToUpper()+propertyName.Substring(1);
		return result;
	}
</script>
